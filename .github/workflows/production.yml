name: Deploy on Production 

on:
  workflow_call:
    secrets:
      sakey:
        required: true
      token:
        required: true
    inputs:
      domain: 
        type: string 
        required: true 
      urlmap:
        type: string 
        required: true 
      projectid: 
        type: string 
        required: true
env: 
  repository: wgall/cloudrun_node_cicd

jobs:
  deploy_on_prod:
    runs-on: ubuntu-latest
    steps:
      - name: Make repo name variable compliant with K8 namespace rules
        run: echo "reponame=$(echo ${{ github.event.repository.name }} | tr _ - )" >> $GITHUB_ENV
      - name: Checkout Pipeline repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.repository }}
          token: ${{ secrets.token }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6
          terraform_wrapper: false
      - name: Authenitcate pipeline repository 
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.sakey }}
      - name: Setup pipline repository
        uses: google-github-actions/setup-gcloud@main 
        with:
          project_id: labs-370214
          export_default_credentials: true 
      - name: Check if registry exists
        id: repository_status
        run: echo "exists=$(gcloud run services list | grep ${{ env.reponame }}-prod | wc -l)" >> $GITHUB_ENV
      - name: Create Backend folder
        if:  ${{ env.exists == '0' }}
        working-directory: ./bucket
        run: |
          sed -i "s/pid/${{ inputs.projectid }}/" main.tf
          terraform init 
          terraform apply --auto-approve -var "projectid=${{ env.projectid }}" -var "project=${{ env.reponame }}/"
      - name: Initialize terraform 
        working-directory: ./node/production
        run: |
          sed -i "s/folder/${{ env.reponame}}-prod/" main.tf
          sed -i "s/pid/${{ inputs.projectid}}/" main.tf
          terraform init -force-copy
      - name: Apply terraform 
        working-directory: ./node/production
        env:
          tag: ${{ github.event.release.tag_name }}
        run: | 
         terraform apply --auto-approve -var "projectid=${{ env.projectid }}" -var "image=${{env.reponame}}" -var "tag=${{env.tag}}" -var "project=${{env.reponame}}"
      - name: Map backend
        if: ${{ env.exists == '0' }}
        run: |
         gcloud compute url-maps add-path-matcher ${{ inputs.urlmap }} --path-matcher-name=${{env.reponame}} --default-service=https://www.googleapis.com/compute/v1/projects/${{ env.projectid }}/global/backendServices/${{ env.reponame }} --new-hosts="${{env.reponame}}.${{ inputs.domain }}"